{"version":3,"file":"main.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;AACA,0DAA0D;AAC1D,oEAAoE;AACpE,mEAAmE;AACnE,+EAA+E;AAC/E,mFAAmF;AACnF,uDAAuD;AACvD,qBAAqB;AACrB,eAAe;AACf,kBAAkB;AAClB,wDAAwD;;AAExD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gBAAgB;AAC9D;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,8DAA8D;;AAE9D;AACA;AACA,oBAAoB;AACpB,sBAAsB;AACtB,wBAAwB;AACxB,0BAA0B;AAC1B,4BAA4B;AAC5B,2BAA2B;AAC3B,0BAA0B;;AAE1B,gCAAgC;AAChC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,wDAAwD,qCAAqC;AAC7F,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;;AAEA,8BAA8B,8BAA8B;AAC5D,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,kCAAkC,EAAE,uCAAuC;AAC5G,UAAU;AACV;AACA;;AAEA;AACA,gFAAgF,sBAAsB;;AAEtG;AACA;AACA;AACA,wBAAwB;AACxB;AACA,qDAAqD,sBAAsB;AAC3E,gGAAgG,sBAAsB;AACtH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,UAAU;AACxD;AACA,6BAA6B,QAAQ;AACrC,8BAA8B,sBAAsB;AACpD;AACA;AACA,kCAAkC;AAClC;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,8BAA8B;AAC9B,0BAA0B;AAC1B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,8CAA8C,UAAU;AACxD;AACA,6BAA6B,QAAQ;AACrC,8BAA8B,sBAAsB;AACpD,0BAA0B;AAC1B;AACA;AACA,kCAAkC;AAClC;AACA;AACA,8BAA8B;AAC9B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,iCAAiC;AACjC,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,MAAM;;AAEjD;AACA,+CAA+C,SAAS;AACxD;;AAEA;AACA;AACA;;AAEA,cAAc;AACd,0DAA0D;;AAE1D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,6DAA6D,KAAK;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,uFAAuF,OAAO;;AAE9F,eAAe;AACf,8BAA8B;;AAE9B;AACA,eAAe,kBAAkB;AACjC;AACA,wBAAwB;AACxB,mBAAmB;AACnB;AACA,iCAAiC;AACjC,6EAA6E,QAAQ,QAAQ,OAAO;AACpG,KAAK;AACL;;AAEA;AACA;AACA,yEAAyE,QAAQ,QAAQ,OAAO,8BAA8B,MAAM;AACpI;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C;AAC/C,CAAC;;;;;;;;;;ACrRD;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,0CAA0C,oBAAoB;AAC9D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,CAAC;;AAED;;;;;;UC5DA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;ACNuB;AACK;AACJ;AACA","sources":["webpack://bookshop-pj_sf/./node_modules/normalize.css/normalize.css?fe2f","webpack://bookshop-pj_sf/./src/styles/main.scss?2ff4","webpack://bookshop-pj_sf/./src/js/books.js","webpack://bookshop-pj_sf/./src/js/header.js","webpack://bookshop-pj_sf/./src/js/slider.js","webpack://bookshop-pj_sf/webpack/bootstrap","webpack://bookshop-pj_sf/webpack/runtime/compat get default export","webpack://bookshop-pj_sf/webpack/runtime/define property getters","webpack://bookshop-pj_sf/webpack/runtime/hasOwnProperty shorthand","webpack://bookshop-pj_sf/webpack/runtime/make namespace object","webpack://bookshop-pj_sf/./src/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// переменные\nconst apiKey = \"AIzaSyBgK_3N7g4vl0LNPFGkS7ZkqQV6n1GOG4w\"; // API google key \nconst categoryBooks = document.querySelectorAll('.category-books'); // категории книг \nconst buttonBasket = document.querySelector('.header-icons__bag'); // кнопка корзины \nconst productQuantity = document.querySelector('.header-icons__bag-quantity'); // ярлык кол-ва покупок \nconst elementCountBuy = document.querySelector('header-icons__bag-quantity-text'); // кол-во покупок \nconst loadMore = document.querySelector('.load-more'); // кнопка load more \nlet resultItog = []; //Массив с отображаемым в данный момент товаром\nlet idBuy = 0; //ID для сохранения информации о товаре в localStorage\nlet countBuy = 0; //Счетчик покупок\nlet buttonBuy = document.getElementsByClassName('buy'); // кнопка buy now / in the cart\n\n// Массив категорий книг \nconst categories = ['Architecture', 'Art', 'Autobiography', 'Business', 'Crafts & Hobbies', 'Drama', 'Fiction', 'Cooking', 'Health & Fitness', 'History', 'Humor', 'Poetry', 'Psychology', 'Science', 'Technology', 'Travel'];\n\n// Проверка и установка idBuy\nidBuy = localStorage.idBuy ? Number(localStorage.idBuy) : 0;\n\n// Проверка countBuy и обновление DOM\ncountBuy = Number(localStorage.countBuy);\nproductQuantity.classList.toggle(\"no_activ\", countBuy === 0);\nelementCountBuy.innerHTML = countBuy || '';\n\n//Запрос \nasync function useRequest(url, callback) {\n    try {\n        const response = await fetch(url);\n        \n        if (!response.ok) {\n            throw new Error(`Статус ответа: ${response.status}`);\n        }\n\n        const result = await response.json();\n        if (callback) {\n            callback(result);\n        }\n    } catch (error) {\n        console.error('Ошибка!', error);\n    }\n}\nconst resultNode = document.querySelector('.shelf_of_books'); //Нода для вставки результата запроса\n\n//Вставка карточек товара в ноду\nfunction displayResult(apiData) {\n    let cards = ''; //\n    let authors = ''; //Автор\n    let thumbnail = ''; //Картинка\n    let retailPrice = ''; //Стоимость\n    let averageRating = ''; //Средний рейтинг\n    let ratingsCount = ''; //Количество отзывов\n    let description = ''; //Описание товара\n\n    let result = apiData.items; //Выбор необходимой части запроса\n    resultItog = resultItog.concat(result);\n\n    //Цикл который проходит по результатам запроса и собирает карты товара\n    result.forEach(item => {\n\n        //Форматирую авторов \n        if (item.volumeInfo.authors) {\n            if(item.volumeInfo.authors.length > 1) {\n                authors = item.volumeInfo.authors.join(', ');\n            } else {\n                authors = item.volumeInfo.authors[0];\n            }\n        } else {\n            authors = 'Author unknown'\n        } \n\n        //Форматирую картинку\n        if(item.volumeInfo.imageLinks) {\n            thumbnail = `style=\"background-image: url(${item.volumeInfo.imageLinks.thumbnail})\"`;\n        } else {\n            thumbnail = ''\n        }\n\n        //Форматирую описание\n        if(item.volumeInfo.description) {\n            description = item.volumeInfo.description;\n        } else {\n            description = 'No description';\n        }\n\n        //Форматирование рейтинга\n        if(item.volumeInfo.averageRating) {\n            averageRating = ``;\n            value = item.volumeInfo.averageRating;\n            value = Math.round(value);\n            for(let i =0; i < value; i++) {\n                averageRating +=`<span class=\"active\"></span>`\n            }\n            value = 5 - value;\n            if(value > 0) {\n                for(let i = 0; i < value; i++) {\n                    averageRating +=`<span></span>`\n                }\n            }\n\n            ratingsCount = `${item.volumeInfo.ratingsCount} review`;\n        } else {\n            averageRating = ``;\n            ratingsCount = ``\n        }\n\n        //Форматирую стоимость\n        if(item.saleInfo.retailPrice) {\n            retailPrice = `<h3>${item.saleInfo.retailPrice.amount} ${item.saleInfo.retailPrice.currencyCode}</h3>`;\n        } else {\n            retailPrice = '' \n        }\n\n        //Создание кнопки покупки\n        let buttonBuys = `<button class=\"buy\" style=\"margin-top: 16px\" value=\"${item.volumeInfo.title}\">buy now</button>`\n\n        //Проверяем, не была ли уже выбрана книга, кнопка которой должна будет изменится, если книжка была выбрана\n        for(let key in localStorage) {\n            if (!localStorage.hasOwnProperty(key)) {\n              continue; // пропустит такие ключи, как \"setItem\", \"getItem\" и так далее\n            }\n            if(localStorage.getItem(key).includes(`${item.volumeInfo.title}`)) {\n                buttonBuys = `<button class=\"buy in_the_cart\" style=\"margin-top: 16px\" value=\"${item.volumeInfo.title}\">IN THE CART</button>`;\n            }\n        }\n\n        let cardBlock //Блок с карточкой товара\n        \n        //Формирование бока с картчкой товара\n        if(averageRating !== '') {\n            cardBlock = `\n                <div class=\"product_card\">\n                    <div class=\"image_book\" ${thumbnail}></div>\n                    <div class=\"description\">\n                        <p>${authors}</p>\n                        <h2>${item.volumeInfo.title}</h2>\n                        <div>\n                            <div class=\"rating-mini\">\n                                ${averageRating}\n                            </div>\n                            ${ratingsCount}\n                        </div>\n                        <div class=\"container_descrip\">\n                            <div class=\"descrip\">\n                                ${description}\n                            </div>\n                        </div>\n                            ${retailPrice}\n                        ${buttonBuys}\n                    </div>\n                </div>\n            `;\n        } else {\n            cardBlock = `\n                <div class=\"product_card\">\n                    <div class=\"image_book\" ${thumbnail}></div>\n                    <div class=\"description\">\n                        <p>${authors}</p>\n                        <h2>${item.volumeInfo.title}</h2>\n                        ${ratingsCount}\n                        <div class=\"container_descrip\">\n                            <div class=\"descrip\">\n                                ${description}\n                            </div>\n                        </div>\n                            ${retailPrice}\n                            ${buttonBuys}\n                    </div>\n                </div>\n            `;\n        }\n      cards = cards + cardBlock; //добавление нескольких блоков\n    });\n\n    //Обновит ноду, если сменилась категория товара    \n    if(count < 8) {\n        resultNode.innerHTML = '';\n    }\n    \n    //Добавляет в ноду блоки\n    resultNode.innerHTML += cards;\n\n    shoppingCounter(resultItog)\n}\n\n\n//Функция работы кнопки купить\nfunction shoppingCounter(result){\n    buttonBuy = document.getElementsByClassName('buy');\n    for(let k = 0; k < buttonBuy.length; k++) {\n        buttonBuy[k].addEventListener('click', () => {\n            if(!buttonBuy[k].classList.contains(\"in_the_cart\")) {\n                countBuy += 1\n                idBuy += 1\n                //info = buttonBuy[k].getAttribute('value');\n                //Сохраняем параметры в localStorage\n                localStorage.setItem('idBuy', idBuy);\n                localStorage.setItem('countBuy', countBuy);\n                localStorage.setItem(`Buy${idBuy}`, JSON.stringify(result[k]));\n\n                //Создаем/редактируем красный круг возле корзины\n                elementCountBuy.innerHTML = `${countBuy}`;\n                productQuantity.classList.remove(\"no_activ\");\n\n                //Меняем параметры кнопки, которую нажали \n                buttonBuy[k].innerHTML = \"IN THE CART\";\n                buttonBuy[k].classList.add(\"in_the_cart\");\n\n            } else {\n                info = buttonBuy[k].getAttribute('value');//Получаем название сохраненной книга\n\n                //Чтобы счетчик покупок не ушел в минус\n                if(countBuy >= 1) {\n                    countBuy -= 1;\n                }\n\n                //Обновляем данные в localStorage\n                localStorage.setItem('countBuy', countBuy);\n\n                //Убираем/редактируем красный круг возле корзины\n                elementCountBuy.innerHTML = `${countBuy}`;\n                if(countBuy < 1) {\n                    productQuantity.classList.add(\"no_activ\");\n                }\n\n                //Удаляем лишние данные в localStorage\n                for(let key in localStorage) {\n                    if (!localStorage.hasOwnProperty(key)) {\n                      continue; // пропустит такие ключи, как \"setItem\", \"getItem\" и так далее\n                    }\n                    if(localStorage.getItem(key).includes(`${info}`)) {\n                        localStorage.removeItem(key);\n                    }\n                }\n\n                //Меняем параметры кнопки, которую нажали \n                buttonBuy[k].innerHTML = \"buy now\";\n                buttonBuy[k].classList.remove(\"in_the_cart\");\n            }\n        });\n    };\n}\n\n//Делаем первоначальный запрос\nuseRequest(`https://www.googleapis.com/books/v1/volumes?q=\"subject:Architecture\"&key=${keyAPI}&printType=books&startIndex=0&maxResults=6&langRestrict=en`, displayResult)\n\nlet count = 6; //Задаем значение счетчику, который используется в URL\nlet categor = 'Architecture'; //Задае првонаальное значение категории книг\n\n//Обработчик нажания на категорию\nfor(let i = 0; i < genre.length; i++) {\n    genre[i].addEventListener('click', () => {\n        resultItog = [];// При переходи из одной категори в другую обновляем массив с отображаемыми карточками товара\n        count = 6; //Обновляем счетчик\n        selectingAnElement(genre[i]);\n        categor = categories[i]; //Обновляем выбранную категорию\n        useRequest(`https://www.googleapis.com/books/v1/volumes?q=\"subject:${categor}\"&key=${keyAPI}&printType=books&startIndex=0&maxResults=6&langRestrict=en`, displayResult)\n    });\n};\n\n//Обработчик нажания на Load more\nload.addEventListener('click', () =>{\n    useRequest(`https://www.googleapis.com/books/v1/volumes?q=\"subject:${categor}\"&key=${keyAPI}&printType=books&startIndex=${count}&maxResults=6&langRestrict=en`, displayResult);\n    count += 6\n});\n\n//Обработчик нажатия на корзину\nbuttonBasket.addEventListener('click', () =>{\n    for(let key in localStorage) {\n        if (!localStorage.hasOwnProperty(key)) {\n          continue; // пропустит такие ключи, как \"setItem\", \"getItem\" и так далее\n        }\n        console.log(key + \": \" + localStorage.getItem(key))\n    }\n\n    //Для очистки localStorage\n    /* countBuy = 0;\n    localStorage.clear();\n    productQuantity.classList.add(\"no_activ\"); */\n});","//активация burger-menu \n\n\nconst burgerMenu = document.querySelector ('.header-icons__burger')\nif (burgerMenu) {\n  const navMenu = document.querySelector ('.nav');\n  burgerMenu.addEventListener(\"click\", function (e) {\n    navMenu.classList.toggle('_active');\n\n  })\n}","const entities = [\n    {\n        img: './images/banner1.png',\n        dot: document.querySelector('.dot-1')\n    },\n    {\n        img: './images/banner2.png',\n        dot: document.querySelector('.dot-2'),\n    },\n    {\n        img: './images/banner3.png',\n        dot: document.querySelector('.dot-3'),\n    }\n];\ndocument.addEventListener('DOMContentLoaded', function() {\n\n\nconst slider = document.querySelector('.slider-content__img');\nlet currentIndex = 0;\n\nfunction setEntity(index) {\n    slider.style.backgroundImage = `url(${entities[index].img})`;\n}\n\nfunction makeActive(index) {\n    entities[index].dot.style.opacity = 1;\n}\n\nfunction makeInactive(index) {\n    entities[index].dot.style.opacity = 0.3;\n}\n\nfunction pressOnElement(index) {\n    makeInactive(currentIndex);\n    currentIndex = index;\n    setEntity(currentIndex);\n    makeActive(currentIndex);\n}\n\nfunction autoSlide() {\n    makeInactive(currentIndex);\n    currentIndex = (currentIndex === entities.length - 1) ? 0 : currentIndex + 1;\n    setEntity(currentIndex);\n    makeActive(currentIndex);\n}\n\nsetInterval(autoSlide, 5000);\n\nfor (let i = 0; i < entities.length; i++) {\n    if (entities[i].dot) {\n        entities[i].dot.addEventListener('click', () => {\n            pressOnElement(i);\n        });\n    }\n}\n\nsetEntity(currentIndex);\nmakeActive(currentIndex);\n});\n\nconsole.log(entities[0].img);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import 'normalize.css';\nimport './styles/main.scss';\nimport './js/slider.js';\nimport './js/header.js';\nimport './js/books.js';"],"names":[],"sourceRoot":""}